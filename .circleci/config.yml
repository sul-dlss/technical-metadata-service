version: 2.1
orbs:
  ruby: circleci/ruby@1.2.0
  node: circleci/node@5.0.0
  docker: circleci/docker@2.0.1
parameters:
  ruby-version:
    type: string
    default: "2.7.1"
executors:
  default:
    docker:
      - image: 'cimg/ruby:<< pipeline.parameters.ruby-version >>-node'
jobs:
  build:
    executor: default
    steps:
      - checkout
      - ruby/install-deps
      - node/install-packages:
          pkg-manager: yarn
  lint:
    executor: default
    steps:
      - checkout
      - ruby/install-deps
      - ruby/rubocop-check:
          format: progress
          label: Inspecting with Rubocop
  test:
    docker:
      - image: 'cimg/ruby:<< pipeline.parameters.ruby-version >>-node'
      - image: circleci/postgres:11
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: technical_metadata_test
          POSTGRES_PASSWORD: sekret
    environment:
      BUNDLE_JOBS: '3'
      BUNDLE_RETRY: '3'
      PGHOST: 127.0.0.1
      PGPASSWORD: sekret
      PGUSER: circleci-demo-ruby
      RAILS_ENV: test
    parallelism: 3
    steps:
      - checkout
      - ruby/install-deps
      - node/install-packages:
          pkg-manager: yarn
      - run:
          command: 'dockerize -wait tcp://localhost:5432 -timeout 1m'
          name: Wait for DB
      - run:
          name: Test prepare
          command: bin/rails db:test:prepare
      - run:
          name: Setup Code Climate test-reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
            ./cc-test-reporter before-build
      - ruby/rspec-test
      - run:
          name: upload test coverage report to Code Climate
          command: ./cc-test-reporter after-build --coverage-input-type simplecov --exit-code $?
  validate:
    executor: default
    steps:
      - checkout
      - run:
          name: Validate API specification
          command: |
            sudo npm install -g openapi-enforcer-cli
            result=$(openapi-enforcer validate openapi.yml)
            [[ $result =~ "Document is valid" ]] && {
            echo "Validation good"
            exit 0
            } || {
            echo $result
            exit 1
            }
workflows:
  build:
    jobs:
      - build
      - validate
      - lint:
          requires:
            - build
      - test:
          requires:
            - build
      - docker/publish:
          context: dlss
          docker-password: DOCKER_PASS
          docker-username: DOCKER_USER
          dockerfile: docker/app/Dockerfile
          name: publish-latest
          image: suldlss/technical-metadata-service
          tag: latest
          requires:
            - validate
            - lint
            - test
          filters:
            branches:
              only:
                - circle
